
services:
  waf-nginx:
    image: 4ss078/waf-nginx:latest
    container_name: waf-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./waf/conf.d:/etc/nginx/conf.d
      - ./waf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./waf/user-rules:/etc/nginx/modsec/user-rules
      - ./certbot/letsencrypt:/etc/letsencrypt
      - ./waf/logs:/var/log/nginx
      - ./www:/var/www/certbot
    restart: unless-stopped
    networks:
      - matrix
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    environment:
      - COLLECTIONS=crowdsecurity/nginx
    volumes:
      - ./crowdsec/config:/etc/crowdsec
      - ./crowdsec/data:/var/lib/crowdsec/data
      - ./waf/logs:/var/log/nginx
    depends_on:
      waf-nginx:
        condition: service_healthy
    networks:
      - matrix
    ports:
      - "127.0.0.1:8080:8080"  # Porta per l'API di CrowdSec
    restart: unless-stopped

  certbot-renew:
    image: 4ss078/certbot:latest
    build:
      context: ./certbot/build
      dockerfile: Dockerfile
    container_name: certbot-renew
    volumes:
      - ./certbot/letsencrypt:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
      - ./www:/var/www/certbot
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while :; do
          certbot renew --webroot -w /var/www/certbot --quiet;
          sleep 12h;
        done
    restart: unless-stopped
    depends_on:
      waf-nginx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/etc/letsencrypt/live/README"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - matrix

  postgres:
    image: postgres:15-alpine
    container_name: synapse-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_CONFIG_FILE: /etc/postgresql/postgresql.conf
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./postgres-config:/etc/postgresql"
    networks:
      - matrix
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: synapse-app
    restart: always
    environment:
      - SYNAPSE_SERVER_NAME=${SYNAPSE_SERVER_NAME}
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_CONFIG_DIR=/data
      - SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - SYNAPSE_NO_TLS=1
    ports:
      - "127.0.0.1:8008:8008"
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - "./synapse-data:/data"
    networks:
      - matrix

  element:
    image: vectorim/element-web:latest
    container_name: synapse-element
    restart: always
    environment:
      - VIRTUAL_HOST=${ELEMENT_SERVER_NAME}
      - VIRTUAL_PORT=80
    volumes:
      - "./element-config.json:/app/config.json"
    networks:
      - matrix
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  coturn:
    image: coturn/coturn:latest
    container_name: synapse-coturn
    restart: always
    command: -c /etc/coturn/turnserver.conf -n --log-file=stdout
    environment:
      - TURN_SECRET=${TURN_SECRET}
      - REALM=${COTURN_SERVER_NAME}
      - MIN_PORT=49160
      - MAX_PORT=49200
    volumes:
      - "./coturn/turnserver.conf:/etc/coturn/turnserver.conf"
      - "./letsencrypt/fullchain.pem:/etc/coturn/fullchain.pem"
      - "./letsencrypt/privkey.pem:/etc/coturn/privkey.pem"
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
      - "49160-49200:49160-49200/udp"
    healthcheck:
      test: ["CMD", "echo", "-n", ">", "/dev/tcp/localhost/3478"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s    
    networks:
      - matrix

networks:
  matrix:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  synapse-data:
  letsencrypt: