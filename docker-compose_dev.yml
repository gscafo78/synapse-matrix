services:
  traefik:
    image: traefik:3.0.1
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --experimental.plugins.traefik-modsecurity-plugin.modulename=github.com/acouvreur/traefik-modsecurity-plugin
      - --experimental.plugins.traefik-modsecurity-plugin.version=v1.3.0
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # - --api.middlewares=traefik-auth.basicauth.users=admin:${TRAEFIK_HASHED_PASSWORD} # Aggiungi autenticazione Basic per il dashboard
      - --certificatesresolvers.leresolver.acme.email=${CERTBOT_MAIL}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - "./letsencrypt:/letsencrypt"
    networks:
      - matrix
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${TREAFIK_SERVER_NAME}`)
      - traefik.http.routers.api.service=api@internal
      # - traefik.http.routers.api.middlewares=traefik-auth
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=leresolver
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.waf.plugin.traefik-modsecurity-plugin.modSecurityUrl=http://waf:80
      - traefik.http.middlewares.waf.plugin.traefik-modsecurity-plugin.maxBodySize=10485760
  waf:
    image: owasp/modsecurity-crs:4.2.0-apache
    volumes:
      - ./modsec/conf/modsecurity.conf:/etc/modsecurity/modsecurity.conf
      - ./modsec/crs:/etc/modsecurity.d/owasp-crs:ro
      - ./modsec/custom-rules:/etc/modsecurity.d/custom-rules:ro
    environment:
      - PARANOIA=1
      - ANOMALY_INBOUND=10
      - ANOMALY_OUTBOUND=5
      - BACKEND=http://dummy
      - MODSECURITY_RULE_ENGINE=On
    networks:
      - matrix

  dummy:
    image: traefik/whoami

  website:
    image: traefik/whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.website.rule=PathPrefix(`/website`)
      - traefik.http.routers.website.middlewares=waf@docker
    networks:
      - matrix

  postgres:
    image: postgres:15-alpine
    container_name: synapse-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_CONFIG_FILE: /etc/postgresql/postgresql.conf
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./postgres-config:/etc/postgresql"
    networks:
      - matrix
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: synapse-app
    restart: always
    environment:
      - SYNAPSE_SERVER_NAME=${SYNAPSE_SERVER_NAME}
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_CONFIG_DIR=/data
      - SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres      
    ports:
      - "127.0.0.1:8008:8008"
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    volumes:
      - "./synapse-data:/data"
    networks:
      - matrix
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synapse.rule=Host(`${SYNAPSE_SERVER_NAME}`)"
      - "traefik.http.routers.synapse.entrypoints=websecure"
      - "traefik.http.routers.synapse.tls.certresolver=leresolver"
      - "traefik.http.services.synapse.loadbalancer.server.port=8008"

  element:
    image: vectorim/element-web:latest
    container_name: synapse-element
    restart: always
    environment:
      - VIRTUAL_HOST=${ELEMENT_SERVER_NAME}
      - VIRTUAL_PORT=80
    volumes:
      - "./element-config.json:/app/config.json"
    networks:
      - matrix
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.element.rule=Host(`$${ELEMENT_SERVER_NAME}`)"
      - "traefik.http.routers.element.entrypoints=websecure"
      - "traefik.http.routers.element.tls.certresolver=leresolver"
      - "traefik.http.services.element.loadbalancer.server.port=80"

  coturn:
    image: coturn/coturn:latest
    container_name: synapse-coturn
    restart: always
    command: -c /etc/coturn/turnserver.conf -n --log-file=stdout
    environment:
      - TURN_SECRET=${TURN_SECRET}
      - REALM=${COTURN_SERVER_NAME}
      - MIN_PORT=49160
      - MAX_PORT=49200
    volumes:
      - "./coturn/turnserver.conf:/etc/coturn/turnserver.conf"
      - "./letsencrypt/fullchain.pem:/etc/coturn/fullchain.pem"
      - "./letsencrypt/privkey.pem:/etc/coturn/privkey.pem"
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      # - "5349:5349"
      # - "5349:5349/udp"
      - "49160-49200:49160-49200/udp"
    coturn:
      depends_on:
        - traefik
    networks:
      - matrix

  synapse-init:
    image: matrixdotorg/synapse:latest
    container_name: synapse-generate
    volumes:
      - "./synapse-data:/data"
    entrypoint:  |
      bash -c "synapse generate -c /data/homeserver.yaml --server-name ${SYNAPSE_SERVER_NAME} --report-stats=no"
    environment:
      - SYNAPSE_SERVER_NAME=${SYNAPSE_SERVER_NAME}
    networks:
      - matrix

networks:
  matrix:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  synapse-data:
  letsencrypt:
