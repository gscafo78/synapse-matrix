
services:
  traefik:
    image: traefik:v3.3.4
    restart: unless-stopped
    container_name: synapse-traefik
    command:
      - --providers.docker
      - --api.insecure=true
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=false  # Only expose services with traefik.enable=true
      # - --log.level=DEBUG  # Aumenta il livello di log
      # - --accesslog=true   # Abilita gli access log
      - --ping=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      - --certificatesresolvers.leresolver.acme.email=${CERTBOT_MAIL}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      synapse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping", "http://localhost:8080/ping"]  # Usa il comando traefik healthcheck
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      # - web
      - internal

  postgres:
    image: postgres:15-alpine
    container_name: synapse-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_CONFIG_FILE: /etc/postgresql/postgresql.conf
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./postgres-config:/etc/postgresql"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: synapse-app
    restart: always
    environment:
      - SYNAPSE_SERVER_NAME=${SYNAPSE_SERVER_NAME}
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_CONFIG_DIR=/data
      - SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - SYNAPSE_NO_TLS=1
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synapse.rule=Host(`${SYNAPSE_SERVER_NAME}`)"
      - "traefik.http.routers.synapse.entrypoints=websecure"
      - "traefik.http.routers.synapse.tls.certresolver=leresolver"
      - "traefik.http.services.synapse.loadbalancer.server.port=8008"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - "./synapse-data:/data"
    networks:
      - internal

  element:
    image: vectorim/element-web:latest
    container_name: synapse-element
    restart: always
    environment:
      - VIRTUAL_HOST=${ELEMENT_SERVER_NAME}
      - VIRTUAL_PORT=80
    volumes:
      - "./element-config.json:/app/config.json"
    depends_on:
      synapse:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.element.rule=Host(`${ELEMENT_SERVER_NAME}`)"
      - "traefik.http.routers.element.entrypoints=websecure"
      - "traefik.http.routers.element.tls.certresolver=leresolver"
      - "traefik.http.services.element.loadbalancer.server.port=80"
    networks:
      - internal

  coturn:
    image: coturn/coturn:latest
    container_name: synapse-coturn
    restart: always
    command: -c /etc/coturn/turnserver.conf -n --log-file=stdout
    environment:
      - TURN_SECRET=${TURN_SECRET}
      - REALM=${COTURN_SERVER_NAME}
      - MIN_PORT=49160
      - MAX_PORT=49200
    volumes:
      - "./coturn/turnserver.conf:/etc/coturn/turnserver.conf"
      - "./letsencrypt/fullchain.pem:/etc/coturn/fullchain.pem"
      - "./letsencrypt/privkey.pem:/etc/coturn/privkey.pem"
    depends_on:
      synapse:
        condition: service_healthy
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
      - "49160-49200:49160-49200/udp"
    networks:
      - internal

  rssbot:
    image: 4ss078/rssbot:latest
    build:
      context: /opt/rsstoelement/build
      dockerfile: Dockerfile
    container_name: synapse-rssbot
    volumes:
      - ./rssapp/settings.json:/app/settings.json:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: unless-stopped
    depends_on:
      synapse:
        condition: service_healthy
    networks:
      - internal

networks:
  internal:
    driver: bridge
  web:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  synapse-data:
  letsencrypt:
